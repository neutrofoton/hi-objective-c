//
//  AddressCard.h
//  Property
//
//  Created by neutro code on 11/6/12.
//  Copyright (c) 2012 neutro code. All rights reserved.
//

//  lists the attributes copy and nonatomic for the properties.The copy attribute says to make a copy of the instance variable in its setter method, as you did in the version you wrote.The default action is to not make a copy, but to instead perform a simple assignment (that’s the default attribute assign), an incorrect approach in this case, as we recently discussed.
 
 //The nonatomic attribute says that you don’t need to worry about race conditions that could occur from multiple threads trying to access the instance variable at the same time.

/*

---------------------
nonatomic vs. atomic
---------------------
 From : http://stackoverflow.com/questions/2255861/property-and-retain-assign-copy-nonatomic
 "atomic" is the default. Always use "nonatomic". 
 I don't know why, but the book I read said there is "rarely a reason" to use "atomic". 
 (BTW: The book I read is the BNR "iOS Programming" book.)

http://rypress.com/tutorials/objective-c/properties
 nonatomic : Don’t guarantee the integrity of accessors in a multi-threaded environment. 
            This is more efficient than the default atomic behavior.

---------------------
readwrite vs. readonly 
---------------------
 From : http://stackoverflow.com/questions/2255861/property-and-retain-assign-copy-nonatomic
 "readwrite" is the default. When you @synthesize, both a getter and a setter will be created for you. 
 If you use "readonly", no setter will be created. 
 Use it for a value you don't want to ever change after the instantiation of the object.

---------------------------
retain vs. copy vs. assign
----------------------------
 From : http://stackoverflow.com/questions/2255861/property-and-retain-assign-copy-nonatomic
"assign" is the default. 
 In the setter that is created by @synthesize, the value will simply be assigned to the attribute. 
 My understanding is that "assign" should be used for non-pointer attributes.
 
"retain" is needed when the attribute is a pointer to an object. 
The setter generated by @synthesize will retain (aka add a retain count) the object. 
You will need to release the object when you are finished with it.
 
"copy" is needed when the object is mutable. 
Use this if you need the value of the object as it is at this moment, 
and you don't want that value to reflect any changes made by other owners of the object. 
You will need to release the object when you are finished with it because you are retaining the copy.

 -----------------------------------
 getter= vs setter=
 ----------------------------------
 From : http://rypress.com/tutorials/objective-c/properties
 getter=	Use a custom name for the getter method.
 setter=	Use a custom name for the setter method.
 
 -------------------------------------
 strong vs weak
 ------------------------------------
 strong	: Create an owning relationship between the property and the assigned value. 
          This is the default for object properties.
 
 weak   : Create a non-owning relationship between the property and the assigned value. 
          Use this to prevent retain cycles.
*/

#import <Foundation/Foundation.h>

@interface AddressCard : NSObject
{
    NSString *name, *email;
}

@property(nonatomic, copy) NSString *name, *email;

-(void) print;
-(void) setName:(NSString *)theName andEmail:(NSString*)theEmail;
@end
